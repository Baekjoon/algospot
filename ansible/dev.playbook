# vim: set expandtab:ts=2:sw=2
---
- hosts: all
  vars:
    django_dir: /vagrant/www
  remote_user: vagrant
  tasks:
  - name: install apt packages
    apt: name={{item}} state=present
    sudo: yes
    with_items:
    - python-setuptools
    - python-dev
    - build-essential
    - git-core
    - libjpeg-dev
    - rabbitmq-server
    - redis-server
    - postgresql-9.3
    - postgresql-contrib-9.3
    - postgresql-server-dev-9.3
    - lxc
    - aufs-tools
  - name: install pip
    sudo: yes
    easy_install: name=pip
  - name: install python dependencies
    sudo: yes
    pip: name={{item}}
    with_items:
    - Django==1.4
    - Pygments==1.6
    - South==0.8.1
    - Whoosh==2.4.1
    - celery==3.0.21
    - celery-with-redis==3.0
    - django-appconf==0.6
    - django-attachments==0.3.1
    - django-avatar==1.0.5
    - django-celery==3.0.17
    - django-debug-toolbar==0.9.4
    - django-extensions==1.1.1
    - django-guardian==1.1.1
    - django-haystack==2.0.0
    - django-picklefield==0.3.0
    - django-registration==1.0
    - django-staticfiles==1.2.1
    - django-tagging==0.3.1
    - ipdb==0.7
    - ipython==0.13.2
    - redis==2.7.6
    - pygooglechart==0.4.0
    - uwsgi
    - Pillow
    - psycopg2
  - name: install linux-image-extra (needed for aufs)
    shell: apt-get install -y linux-image-extra-`uname -r`
    sudo: yes
  - name: add nginx stable
    sudo: yes
    apt_repository: repo='ppa:nginx/stable'
  - name: install nginx
    sudo: yes
    apt: name=nginx
  - name: install modified misaka
    sudo: yes
    shell: cd /vagrant/libs/misaka; python setup.py install
  - name: create postgres user
    postgresql_user: name=vagrant role_attr_flags=SUPERUSER
    sudo_user: postgres
    sudo: yes
  - name: create postgres user root
    postgresql_user: name=root role_attr_flags=SUPERUSER
    sudo_user: postgres
    sudo: yes
  - name: create algospot database
    postgresql_db: name=algospot 
    sudo: yes
    sudo_user: postgres
  - name: add permission for root (used for celeryd)
    postgresql_privs: database=algospot privs=ALL type=database role=root
    sudo: yes
    sudo_user: postgres
  - name: django syncdb 
    django_manage: command=syncdb app_path={{django_dir}}
  - name: load base data (must come before migrate!)
    django_manage: command=loaddata app_path={{django_dir}} fixtures=base/fixtures/group_fixtures.json
  - name: migrate base first 
    shell: ./manage.py migrate base chdir=/vagrant/www
  - name: django migrate 
    django_manage: command=migrate app_path={{django_dir}}
  - name: load superuser
    django_manage: command=loaddata app_path={{django_dir}} fixtures=base/fixtures/superuser_fixtures.json
  - name: load all remaining fixutres
    django_manage: command=loaddata app_path={{django_dir}} fixtures={{item}}
    with_items: 
      - base/fixtures/guardian_fixtures.json 
      - forum/fixtures/fixtures.json 
      - judge/fixtures/fixtures.json 
      - wiki/fixtures/fixtures.json
  - name: collectstatic
    django_manage: command=collectstatic app_path={{django_dir}}
  - name: make judge file directory
    file: path={{item}} state=directory
    with_items:
      - /vagrant/www/media/judge-attachments/997880217dc5432e5425aca9fab8c317
      - /vagrant/www/media/judge-attachments/67dfd95b87cff6ac5af6af76fc18f38e
  - name: copy judging data for example problem
    copy: src=../dev_data/plus.in dest=/vagrant/www/media/judge-attachments/997880217dc5432e5425aca9fab8c317/plus.in
  - name: copy judging data for example problem (output)
    copy: src=../dev_data/plus.out dest=/vagrant/www/media/judge-attachments/67dfd95b87cff6ac5af6af76fc18f38e/plus.out
  - name: include everyone in "everyone" group
    shell: ./manage.py include_everyone chdir=/vagrant/www
  - name: patch psql table for guardian  
    shell: psql algospot < base/queries/patch_psql_table.sql chdir=/vagrant/www
  - name: copy psql configurations (so root can access database, needed for celeryd)
    copy: src={{item}} dest=/etc/postgresql/9.3/main/ backup=yes
    sudo: yes
    with_items: 
      - ../configs/pg_hba.conf
      - ../configs/pg_ident.conf
  - name: copy grub config (required for LXC)
    copy: src=../configs/grub dest=/etc/default backup=yes
    sudo: yes
  - name: update grub config
    shell: update-grub
    sudo: yes
  - name: copy celery runner
    copy: src=../configs/celeryd_initd dest=/etc/init.d/celeryd
  - name: change permission for celery runner
    shell: chmod go+rwx /etc/init.d/celeryd
    sudo: yes
    sudo: yes
  - name: copy celery config
    copy: src=../configs/celeryd_config dest=/etc/default/celeryd
    sudo: yes
  - name: make celery directories
    file: path={{item}} state=directory
    with_items:
      - /var/run/celery 
      - /var/log/celery
    sudo: yes
  - name: install celeryd service
    shell: update-rc.d celeryd defaults 99 01
    sudo: yes
  - name: copy nginx conf
    copy: src=../configs/nginx dest=/etc/nginx/sites-available/default backup=yes
    sudo: yes
  - name: make uwsgi conf dir
    file: path=/etc/uwsgi/apps-enabled state=directory
    sudo: yes
  - name: copy uwsgi conf
    copy: src=../configs/uwsgi.ini dest=/etc/uwsgi/apps-enabled backup=yes
    sudo: yes
  - name: copy uwsgi upstart conf
    copy: src=../configs/uwsgi.conf dest=/etc/init/ backup=yes
    sudo: yes
  - name: make /var/www
    file: path=/var/www state=directory 
    sudo: yes
  - name: make /var/www open for www-data
    shell: chmod go+rwx /var/www
    sudo: yes
